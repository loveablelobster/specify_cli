#!/usr/bin/env ruby
require 'gli'
begin # XXX: Remove this begin/rescue before distributing your app
require 'sp_resource'
rescue LoadError
  STDERR.puts "In development, you need to use `bundle exec bin/sp_resource` to run your app"
  STDERR.puts "At install-time, RubyGems will make sure lib, etc. are in the load path"
  STDERR.puts "Feel free to remove this message from bin/sp_resource now"
  exit 64
end

include GLI::App

program_desc 'Manage Specify application resources from the command line'

version SpResource::VERSION

subcommand_option_handling :normal
arguments :strict

# desc 'Describe some switch here'
# switch [:s,:switch]
#
# desc 'Describe some flag here'
# default_value 'the default'
# arg_name 'The name of the argument'
# flag [:f,:flagname]

desc 'Adds a configuration file in /usr/local/etc/sp_resource/db.yml'
long_desc "
The configuration file db.yml stores information about the databases
"
arg_name '[database]'
command :config do |c|
  c.desc 'Overwrite an existing config file'
  c.switch :o
  c.desc 'Create an empty template'
  c.switch :t

  c.desc 'Copy an existing db.yml file to /usr/local/etc/sp_resource'
  c.flag :file
  c.action do |global_options,options,args|
    puts "-o - #{options[:o].inspect}"
    puts "-t - #{options[:t].inspect}"
    puts "args - #{args.inspect}"

    config = load_config

    if options[:file]
      exit 1 if config && !options[:o]
      config = Psych.load_file(options[:file])
      save_config(config)
      puts 'file installed as /usr/local/etc/sp_resource/db.yml'
      exit 0
    end

    if args.empty?
      # create a config file for a single Specify instance, ask for the db name
      print 'database name'
      db = Readline.readline(': ', true)
      configure config, db
    else
      args.each do |db|
        configure config, db
      end
    end
  end
end

desc 'Describe viewset here'
arg_name 'Describe arguments to viewset here'
command :viewset do |c|
  c.desc 'Describe a switch to config'
  c.switch :s

  c.desc 'Describe a flag to config'
  c.default_value 'default'
  c.flag :f
  c.action do |global_options,options,args|
    puts "viewset command ran"
    puts "args - #{args.inspect}"
  end
end

pre do |global,command,options,args|
  # Pre logic here
  # Return true to proceed; false to abort and not call the
  # chosen command
  # Use skips_pre before a command to skip this block
  # on that command only
  true
end

post do |global,command,options,args|
  # Post logic here
  # Use skips_post before a command to skip this
  # block on that command only
end

on_error do |exception|
  # Error logic here
  # return false to skip default error handling
  true
end

exit run(ARGV)
