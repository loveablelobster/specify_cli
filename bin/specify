#!/usr/bin/env ruby
# frozen_string_literal: true

require 'gli'

# TODO: Remove this begin/rescue before distributing your app
begin
  require 'specify'
rescue LoadError
  STDERR.puts 'In development, you need to use `bundle exec bin/specify` to'\
              ' run your app'
  exit 64
end

include GLI::App

program_desc 'Manage Specify application resources from the command line'

version Specify::VERSION

subcommand_option_handling :normal
arguments :strict

# global options

# desc 'Describe some switch here'
# switch [:s,:switch]
#
desc 'Host name for the database server'
default_value 'localhost'
arg_name '[hostname]'
flag %i[H host]

desc 'Port for the database server'
default_value '3306'
arg_name '[port]'
flag %i[P port]

desc 'MySQL/MariaDB user'
default_value 'root'
arg_name '[name]'
flag %i[U user]

desc 'Password'
arg_name '[password]'
flag %i[p password]

desc 'Database'
arg_name '[database]'
flag %i[D database]

desc 'Specify User'
arg_name '[specify_user_name]'
flag %i[u specify_user]

desc 'Database File'
arg_name '[yaml_file]'
flag %i[c db_config]

desc 'Adds a configuration file as ~/.specify.rc.yaml'
long_desc "
The configuration file ~/.specify.rc.yaml...
"
command [:config, :c] do |c|
end

desc 'Adds a database configuration file as ~/.specify_dbs.rc.yaml'
long_desc "
The database configuration file ~/.specify_dbs.rc.yaml stores information about
 the databases.
"
arg_name '[database]'
command [:database, :d] do |c|
  c.desc 'Overwrite an existing databse configuration file'
  c.switch :force

  c.desc 'Create an empty template'
  c.flag :t, :template # FIXME: should have arg for path

  c.desc 'Copy an existing database configuration file to~/.specify.rc'
  c.flag :f, :file
  c.action do |global_options,options,args|

    puts "--template - #{options[:template].inspect}"

    config = Specify::CLI.load_config

    if options[:file]
      if config && !options[:force]
        STDERR.puts "file #{DATABASES} exists"
        STDERR.puts 'use the -o option (overwrite) if you want to overwrite it'
        exit 1
      end
      config = Psych.load_file(options[:file])
      Specify::CLI.save_config(config)
      puts 'file installed as ~/.specify.rc'
      exit 0
    end

    if args.empty?
      # create a config file for a single Specify instance, ask for the db name
      print 'database name'
      db = Readline.readline(': ', true)
      Specify::CLI.configure config, db
    else
      args.each do |db|
        Specify::CLI.configure config, db
      end
    end
  end
end

desc 'Creates stub records'
long_desc ""
arg_name '[database][collection][count]'
command [:stubs, :s] do |c|
  c.desc 'load stub data from file'
  c.arg_name '[yaml_file]'
  c.flag %i[f file]

  c.desc 'the cataloger'
  c.arg_name '[name]'
  c.flag %i[c cataloger]

  c.desc 'dataset name'
  c.arg_name '[name]'
  c.flag %i[d dataset]

  c.desc 'accession number'
  c.arg_name '[accession_number]'
  c.flag %i[a accession]

  c.desc 'geographic information (collecting data)'
  c.arg_name '[geography]' # "Country: Denmark, State: ..."
  c.flag %i[g geography]

  c.desc 'default locality name'
  c.arg_name '[name]'
  c.flag %i[l locality]

  c.desc 'taxon (determination)'
  c.arg_name 'taxon'
  c.flag %i[t taxon]

  c.desc 'preparation type'
  c.arg_name '[name]'
  c.flag %i[p preptype]

  c.desc 'preparation count'
  c.arg_name '[number]'
  c.flag %i[n prepcount]

  c.action do |global_options, options, args|
    count = args.pop.to_i

    if options[:file]
      # load the file
    end

    params = Specify::CLI.wrap_args(global_options, args, options.compact)

    Specify::CLI.make_stubs params, count
  end
end

desc 'Describe viewset here'
arg_name 'Describe arguments to viewset here'
command [:viewset, :vs] do |c|
  c.desc 'Describe a switch to config'
  c.switch :s

  c.desc 'Describe a flag to config'
  c.default_value 'default'
  c.flag :f
  c.action do |global_options,options,args|
    puts "viewset command ran"
    puts "args - #{args.inspect}"
  end
end

pre do |global,command,options,args|
  # Pre logic here
  # Return true to proceed; false to abort and not call the
  # chosen command
  # Use skips_pre before a command to skip this block
  # on that command only
  true
end

post do |global,command,options,args|
  # Post logic here
  # Use skips_post before a command to skip this
  # block on that command only
end

on_error do |exception|
  # Error logic here
  # return false to skip default error handling
  true
end

exit run(ARGV)
