#!/usr/bin/env ruby
# frozen_string_literal: true

require 'gli'
require 'specify'

# TODO: Remove this begin/rescue before distributing your app
# begin
# rescue LoadError
#   STDERR.puts 'In development, you need to use `bundle exec bin/specify` to'\
#               ' run your app'
#   exit 64
# end

include GLI::App

program_desc Specify::DESCRIPTION

version Specify::VERSION

subcommand_option_handling :normal
arguments :strict

sessions = []

# global options

# desc 'Describe some switch here'
# switch [:s,:switch]
#
desc 'Host name for the database server'
arg_name '[hostname]'
default_value 'localhost'
flag %i[h host]

desc 'Port for the database server'
arg_name '[port]'
default_value '3306'
flag %i[p port]

desc 'MySQL/MariaDB user'
arg_name '[name]'
default_value 'root'
flag %i[u user]

desc 'Password'
arg_name '[password]'
flag %i[P password]

desc 'Database'
arg_name '[database]'
flag %i[D database]

desc 'Specify User'
arg_name '[specify_user_name]'
flag %i[U specify_user]

desc 'Database File'
arg_name '[yaml_file]'
# default_value File.expand_path('~/.specify_dbs.rc.yaml')
flag %i[c db_config]

desc 'Adds a configuration file as ~/.specify.rc.yaml'
long_desc "
The configuration file ~/.specify.rc.yaml...
"
command [:config, :c] do |c|
end

desc 'Adds a database configuration file as ~/.specify_dbs.rc.yaml'
long_desc "
The database configuration file ~/.specify_dbs.rc.yaml stores information about
 the databases.
"
arg_name '[database]'
command [:database, :d] do |c|
  c.desc 'Overwrite an existing databse configuration file'
  c.switch :force

  c.desc 'Create an empty template'
  c.flag :t, :template # FIXME: should have arg for path

  c.desc 'Copy an existing database configuration file to~/.specify.rc'
  c.flag :f, :file
  c.action do |global_options,options,args|

  p global_options[:host]
  p args

  puts 'load the file'
  unless Specify::CLI.db_config?
    puts 'create new config'
    Specify::Configuration::Config.empty do |config|
      puts 'do whatever is necessary'
    end
  end

  puts 'handle database config'
  db_config = Specify::Configuration::DBConfig.new global_options[:host],
                                                   args.shift,
                                                   Specify::DATABASES

  puts 'handle host repo mapping'

#     puts "--template - #{options[:template].inspect}"
#
#     config = Specify::CLI.load_config
#
#     if options[:file]
#       if config && !options[:force]
#         STDERR.puts "file #{DATABASES} exists"
#         STDERR.puts 'use the -o option (overwrite) if you want to overwrite it'
#         exit 1
#       end
#       config = Psych.load_file(options[:file])
#       Specify::CLI.save_config(config)
#       puts 'file installed as ~/.specify.rc'
#       exit 0
#     end
#
#     if args.empty?
#       # create a config file for a single Specify instance, ask for the db name
#       print 'database name'
#       db = Readline.readline(': ', true)
#       Specify::CLI.configure config, db
#     else
#       args.each do |arg|
#         Specify::CLI.configure config, arg
#       end
#     end
  end
end

desc 'Creates stub records'
long_desc "
creates stube records;
the [database] and [collection] args can be ommitted when specified in a YAML
file
"
arg_name '[collection][count]'
command [:stubs, :s] do |c|
  c.desc 'load stub data from file'
  c.arg_name '[yaml_file]'
  c.flag %i[f file]

  c.desc 'the cataloger'
  c.arg_name '[name]'
  c.flag %i[c cataloger]

  c.desc 'dataset name'
  c.arg_name '[name]'
  c.flag %i[d dataset]

  c.desc 'accession number'
  c.arg_name '[accession_number]'
  c.flag %i[a accession]

  c.desc 'geographic information (collecting data)'
  c.arg_name '[geography]' # "Country: Denmark, State: ..."
  c.flag %i[g geography]

  c.desc 'default locality name'
  c.arg_name '[name]'
  c.flag %i[l locality]

  c.desc 'taxon (determination)'
  c.arg_name 'taxon'
  c.flag %i[t taxon]

  c.desc 'preparation type'
  c.arg_name '[name]'
  c.flag %i[p preptype]

  c.desc 'preparation count'
  c.arg_name '[number]'
  c.flag %i[n prepcount]

  c.action do |global_options, options, args|
    count = args.pop.to_i
    params = if options[:file]
               file = File.expand_path(options[:file])
               Psych.load_file(file)
             else
               Specify::CLI.wrap_args(global_options, args, options.compact)
             end

    stub_generator = Specify::Service::StubGenerator.unwrap params

    sessions << stub_generator.session

    Specify::CLI.make_stubs stub_generator, params, count
  end
end

desc 'Uploads a views file (.views.xml) to the database'
long_desc "
Uploads a viewset file to the database
[collection] the collection the user is logged in to (can be omitted if the -b
or -B options are used)
'file' is the file to upload (must be .views.xml)
valid args for --user_type: [manager]|[fullaccess]|[guest]|[limitedaccess]'
--branch takes argument in format:
 'repository_name/database_name/collection_name/level'
 will use
"
arg_name '[collection][file]'
command [:viewset, :vs] do |c|
  c.desc 'current branch'
  c.switch :b

  c.desc 'branch name'
  c.arg_name '[repository_and_branch_name]'
  c.flag %i[B branch]

  c.desc 'upload for collection'
  c.switch :c

  c.desc 'upload for discipline'
  c.switch :d

  c.desc 'upload for user type'
  c.arg_name '[name]'
  c.flag %i[t user_type]

  c.desc 'upload for user'
  c.arg_name '[name]'
  c.flag %i[u user]

  c.action do |global_options,options,args|
    file = File.expand_path(args.pop)
    collection = args.shift

    params = { host: global_options[:host],
               database: global_options[:database],
               collection: collection,
               specify_user: global_options[:specify_user],
               config: global_options[:db_config] }

    view_loader = if options[:b] || options[:B]
                    Specify::Service::ViewLoader.from_branch options[:B]
                  else
                    raise 'collection required' unless collection
                    params[:level] = Specify::CLI.level options
                    Specify::Service::ViewLoader.new params
                  end
    sessions << view_loader.session
    view_loader.import file
  end
end

pre do |global,command,options,args|
  # Pre logic here
  # Return true to proceed; false to abort and not call the
  # chosen command
  # Use skips_pre before a command to skip this block
  # on that command only
  true
end

post do |global,command,options,args|
  # Post logic here
  # Use skips_post before a command to skip this
  # block on that command only
  sessions.each { |session| session.close }
end

on_error do |exception|
  # Error logic here
  # return false to skip default error handling

  sessions.each { |session| session.close }
  true
end

exit run(ARGV)
