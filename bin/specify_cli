#!/usr/bin/env ruby
# frozen_string_literal: true

require 'gli'
require 'specify'

include GLI::App

program_desc Specify::DESCRIPTION

version Specify::VERSION

subcommand_option_handling :normal
arguments :strict

sessions = []
script_dir = Dir.pwd

desc 'Connect to host.'
arg_name '[name]'
default_value 'localhost'
flag %i[H host]

desc 'Port number to use for connection.'
arg_name '[number]'
default_value '3306'
flag %i[p port]

desc 'MySQL/MariaDB user for login.'
arg_name '[name]'
flag %i[u user]

desc 'Password to use when connecting to server. Omit for password prompt.'
arg_name '[name]'
flag %i[P password]

desc 'Database to use.'
arg_name '[name]'
flag %i[D database]

desc 'Specify User used for the session.'
arg_name '[name]'
flag %i[U specify_user]

desc 'YAML File with settings for database connections and directory mappings.'
arg_name '[path]'
default_value File.expand_path('~/.specify_dbs.rc.yaml')
flag %i[c db_config]

desc 'Adds a configuration file as ~/.specify.rc.yaml'
long_desc "
The configuration file ~/.specify.rc.yaml...
"
command [:config, :c] do |c|
end

desc 'Adds a database configuration to ~/.specify_dbs.rc.yaml'
long_desc "
The database configuration file ~/.specify_dbs.rc.yaml stores information about
 the databases. Add information on a specific database using this command.
"
arg_name '[database]'
command [:database, :d] do |c|
  c.action do |global_options, options, args|
    host = global_options[:host]
    database = args.shift

    file = File.expand_path(global_options[:db_config])

    Specify::CLI.db_config! file, global_options

    db_config = Specify::Configuration::DBConfig.new host, database, file

    if db_config.known?
      STDERR.puts "#{database} on #{host} is already configured"
      exit 0
    else
      unless db_config.host?
        exit 1 unless Specify::CLI.configure_host(db_config)
      end
      Specify::CLI.configure_database db_config
    end
  end
end

desc 'Maps a git repository name to a host'
long_desc "
Required for automatic target resolution in the viewset command.
"
arg_name '[repository_name]'
command [:repository, :r] do |c|
  c.desc 'Map the current directory/repository to the host'
  c.switch %i[c current]

  c.action do |global_options, options, args|
    host = global_options[:host]
    dir = options[:current] ? Dir.pwd : File.expand_path(args.shift)

    file = File.expand_path(global_options[:db_config])

    Specify::CLI.db_config! file, global_options

    host_config = Specify::Configuration::HostConfig.new file

    unless host_config.directory? dir
      host_config.map_directory dir, host
      host_config.save
    end
  end
end

desc 'Creates stub records'
long_desc "
creates stube records;
the [database] and [collection] args can be ommitted when specified in a YAML
file
"
arg_name '[collection][count]'
command [:stubs, :s] do |c|
  c.desc 'load stub data from file'
  c.arg_name '[yaml_file]'
  c.flag %i[f file]

  c.desc 'the cataloger'
  c.arg_name '[name]'
  c.flag %i[c cataloger]

  c.desc 'dataset name'
  c.arg_name '[name]'
  c.flag %i[d dataset]

  c.desc 'accession number'
  c.arg_name '[accession_number]'
  c.flag %i[a accession]

  c.desc 'geographic information (collecting data)'
  c.arg_name '[geography]' # "Country: Denmark, State: ..."
  c.flag %i[g geography]

  c.desc 'default locality name'
  c.arg_name '[name]'
  c.flag %i[l locality]

  c.desc 'taxon (determination)'
  c.arg_name 'taxon'
  c.flag %i[t taxon]

  c.desc 'preparation type'
  c.arg_name '[name]'
  c.flag %i[p preptype]

  c.desc 'preparation count'
  c.arg_name '[number]'
  c.flag %i[n prepcount]

  c.action do |global_options, options, args|
    count = args.pop.to_i
    params = if options[:file]
               file = File.expand_path(options[:file])
               Psych.load_file(file)
             else
               Specify::CLI.wrap_args(global_options, args, options.compact)
             end

    stub_generator = Specify::Service::StubGenerator.unwrap params

    sessions << stub_generator.session

    Specify::CLI.make_stubs stub_generator, count
  end
end

desc 'Uploads a views file (.views.xml) to the database'
long_desc "
Uploads a viewset file to the database
[collection] the collection the user is logged in to (can be omitted if the -b
or -B options are used)
'file' is the file to upload (must be .views.xml)
valid args for --user_type: [manager]|[fullaccess]|[guest]|[limitedaccess]'
--branch takes argument in format:
 'repository_name/database_name/collection_name/level'
 will use
"
arg_name '[collection][file]'
command [:viewset, :vs] do |c|
  c.desc 'current branch'
  c.switch :b

  c.desc 'branch name'
  c.arg_name '[repository_and_branch_name]'
  c.flag %i[B branch]

  c.desc 'upload for collection'
  c.switch :c

  c.desc 'upload for discipline'
  c.switch :d

  c.desc 'upload for user type'
  c.arg_name '[name]'
  c.flag %i[t user_type]

  c.desc 'upload for user'
  c.arg_name '[name]'
  c.flag %i[u user]

  c.action do |global_options, options, args|
    file = File.expand_path(args.pop)
    collection = args.shift
    config = global_options[:db_config]
    params = { host: global_options[:host],
               database: global_options[:database],
               collection: collection,
               specify_user: global_options[:specify_user],
               config: config }

    view_loader = if options[:b] || options[:B]
                    path = File.dirname(File.expand_path(file))
                    Dir.chdir path unless script_dir == path
                    Specify::Service::ViewLoader.from_branch path: path,
                                                             name: options[:B],
                                                             config: config
                  else
                    raise 'collection required' unless collection
                    params[:level] = Specify::CLI.level options
                    Specify::Service::ViewLoader.new params
                  end
    sessions << view_loader.session
    view_loader.import file
  end
end

pre do |global, command, options, args|
  # Pre logic here
  # Return true to proceed; false to abort and not call the
  # chosen command
  # Use skips_pre before a command to skip this block
  # on that command only
  true
end

post do |global, command, options, args|
  # Post logic here
  # Use skips_post before a command to skip this
  # block on that command only
  sessions.each(&:close)
  Dir.chdir script_dir unless script_dir == Dir.pwd
end

on_error do |exception|
  # Error logic here
  # return false to skip default error handling

  sessions.each(&:close)
  Dir.chdir script_dir unless script_dir == Dir.pwd
  true
end

exit run(ARGV)
